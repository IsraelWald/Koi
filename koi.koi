class ListNode {
    init(value) {
        this.value = value;
        this.next = nil;
        this.prev = nil;
    }
}

class List {
    init() {
        this.head = nil;
        this.tail = nil;
        this._length = 0;
    }
    append(item) {
        var node = ListNode(item);
        if (this.head == nil) {
            this.head = node;
            this.tail = node;
        } else {
            node.prev = this.tail;
            this.tail.next = node;
            this.tail = node;
        }
        this._length = this._length + 1;
        return this;
    }
    pop() {
        if (this.tail == nil) {
            return;
        }
        var node = this.tail;
        var prev = node.prev;
        this.tail = prev;
        if (prev != nil) {
            prev.next = nil;
        } else {
            this.head = nil;
        }
        this._length = this._length - 1;
        return node.value;
    }
    forEach(callback) {
        var node = this.head;
        while (node != nil) {
            if (callback(node.value)) {
                return;
            }
            node = node.next;
        }
    }
    get(index) {
        var node = this.head;
        var i = 0;
        while (node != nil) {
            if (i == index) {
                return node.value;
            }
            node = node.next;
            i = i + 1;
        }
        return nil;
    }
    len() {
        return this._length;
    }
    last() {
        if (this.tail != nil) {
            return this.tail.value;
        } else {
            return nil;
        }
    }
}
class Object {}

class Map {
    init() {
        this._items = Object();
        this._count = 0;
    }
    set(key, value) {
        this._count = this._count + 1;
        this._items.key = value;
    }
    get(key) {
        return this._items.key;
    }
    size() {return this._count;}
}

// Token Class
class Token {
    init(type, lexeme, literal, line) {
        this.type = type;
        this.lexeme = lexeme;
        this.literal = literal;
        this.line = line;
    }
}

class TokenType {
    init(){
        // Single char tokens
        this.LEFT_PAREN = "LEFT_PAREN";
        this.RIGHT_PAREN = "RIGHT_PAREN";
        this.LEFT_BRACE = "LEFT_BRACE";
        this.RIGHT_BRACE = "RIGHT_BRACE";
        this.COMMA = "COMMA";
        this.DOT = "DOT";
        this.MINUS = "MINUS";
        this.PLUS = "PLUS";
        this.SEMICOLON = "SEMICOLON";
        this.SLASH = "SLASH";
        this.STAR = "STAR";
        this.MOD = "MOD";
        // one or two char tokens
        this.BANG = "BANG";
        this.BANG_EQUAL = "BANG_EQUAL";
        this.EQUAL = "EQUAL";
        this.EQUAL_EQUAL = "EQUAL_EQUAL";
        this.GREATER = "GREATER";
        this.GREATER_EQUAL = "GREATER_EQUAL";
        this.LESS = "LESS";
        this.LESS_EQUAL = "LESS_EQUAL";
        // Literals
        this.IDENTIFIER = "IDENTIFIER";
        this.STRING = "BANG";
        this.NUMBER = "NUMBER";
        // Keywords
        this.AND = "AND";
        this.OR = "OR";
        this.NOT = "NOT";
        this.IF = "IF";
        this.ELSE = "ELSE";
        this.CLASS = "CLASS";
        this.TRUE = "TRUE";
        this.FALSE = "FALSE";
        this.NIL = "NIL";
        this.FUN = "FUN";
        this.FOR = "FOR";
        this.WHILE = "WHILE";
        this.PRINT = "PRINT";
        this.RETURN = "RETURN";
        this.SUPER = "SUPER";
        this.THIS = "THIS";
        this.VAR = "VAR";

        this.EOF = "eof";
    }
}

var TT = TokenType();

class Scanner {
    init(source, on_error) {
        this.source = source;
        this.on_error = on_error;
        this.tokens = List();
        this.current = 0;
        this.line = 0;
        this.start = 0;

        this.keywords = Map();
        this.keywords.set("and", TT.AND);
        this.keywords.set("or", TT.OR);
        this.keywords.set("not", TT.NOT);
        this.keywords.set("if", TT.IF);
        this.keywords.set("else", TT.ELSE);
        this.keywords.set("class", TT.CLASS);
        this.keywords.set("true", TT.TRUE);
        this.keywords.set("false", TT.FALSE);
        this.keywords.set("nil", TT.NIL);
        this.keywords.set("fun", TT.FUN);
        this.keywords.set("for", TT.FOR);
        this.keywords.set("while", TT.WHILE);
        this.keywords.set("print", TT.PRINT);
        this.keywords.set("return", TT.RETURN);
        this.keywords.set("super", TT.SUPER);
        this.keywords.set("this", TT.THIS);
        this.keywords.set("var", TT.VAR);
    }
    scan_tokens() {
        while (!this._is_at_end()) {
            ...
        }
    }
    _is_at_end() {
        return this.current >= length(this.source);
    }
}

var s = Scanner("", "");

print s.keywords.size();